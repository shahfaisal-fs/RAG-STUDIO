import { useState } from 'react';
import { Send } from 'lucide-react';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface RetrievedContext {
  text: string;
  score: number;
  source: string;
}

export const Chat = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [showContext, setShowContext] = useState(false);
  const [retrievedContext, setRetrievedContext] = useState<RetrievedContext[]>([]);
  const [selectedProject, setSelectedProject] = useState('');

  const mockProjects = [
    { id: '1', name: 'Customer Support RAG' },
    { id: '2', name: 'Product Documentation RAG' },
    { id: '3', name: 'Technical Specs RAG' },
  ];

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');

    // Mock API call and response
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: 'This is a mock response from the RAG system. In a real implementation, this would be generated by querying the vector store and using the LLM to synthesize a response based on the retrieved context.',
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, assistantMessage]);
      
      // Mock retrieved context
      setRetrievedContext([
        {
          text: 'Sample retrieved context from document 1',
          score: 0.95,
          source: 'doc1.pdf',
        },
        {
          text: 'Sample retrieved context from document 2',
          score: 0.85,
          source: 'doc2.pdf',
        },
      ]);
    }, 1000);
  };

  return (
    <div className="flex h-[calc(100vh-7rem)]">
      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Project Selector */}
        <div className="mb-4">
          <select
            value={selectedProject}
            onChange={(e) => setSelectedProject(e.target.value)}
            className="w-full p-2 rounded-md border border-slate-300 dark:border-slate-600 dark:bg-slate-700"
          >
            <option value="">Select a Project</option>
            {mockProjects.map(project => (
              <option key={project.id} value={project.id}>
                {project.name}
              </option>
            ))}
          </select>
        </div>

        {/* Messages Area */}
        <div className="flex-1 overflow-y-auto mb-4 space-y-4 p-4 bg-white dark:bg-slate-800 rounded-lg">
          {messages.map(message => (
            <div
              key={message.id}
              className={`flex ${
                message.role === 'user' ? 'justify-end' : 'justify-start'
              }`}
            >
              <div
                className={`max-w-[70%] rounded-lg p-4 ${
                  message.role === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'bg-slate-100 dark:bg-slate-700 text-slate-900 dark:text-white'
                }`}
              >
                {message.content}
              </div>
            </div>
          ))}
        </div>

        {/* Input Area */}
        <div className="p-4 bg-white dark:bg-slate-800 rounded-lg">
          <div className="flex space-x-4">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSend()}
              placeholder="Type your message..."
              className="flex-1 p-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600"
            />
            <button
              onClick={handleSend}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              <Send className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>

      {/* Context Sidebar */}
      <div className="w-1/3 ml-4">
        <div className="mb-4">
          <button
            onClick={() => setShowContext(!showContext)}
            className="w-full px-4 py-2 bg-slate-100 dark:bg-slate-700 text-slate-900 dark:text-white rounded-md"
          >
            {showContext ? 'Hide' : 'Show'} Retrieved Context
          </button>
        </div>

        {showContext && (
          <div className="bg-white dark:bg-slate-800 rounded-lg p-4 space-y-4">
            {retrievedContext.map((context, index) => (
              <div
                key={index}
                className="p-3 bg-slate-50 dark:bg-slate-700 rounded-md"
              >
                <div className="text-sm text-slate-500 dark:text-slate-400 mb-1">
                  Score: {context.score.toFixed(2)} | Source: {context.source}
                </div>
                <div className="text-slate-900 dark:text-white">
                  {context.text}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};